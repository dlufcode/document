package javaapplication;

import java.util.List;
import java.util.ArrayList;
import java.util.Hashtable;

/**
 *
 * @author liangjun01
 */
public class arrayObj {

    public static int[] rightMove(int[] data, int n) {
        int len = data.length;
        if (n >= len) {
            return data;
        }
        shiftArray(data, 0, len - n - 1);
        shiftArray(data, len - n, len - 1);
        shiftArray(data, 0, len - 1);
        return data;
    }

    public static void shiftArray(int[] data, int start, int end) {
        while (start != end) {
            int temp = data[end];
            data[end] = data[start];
            data[start] = temp;
            if (end - start == 1) {
                break;
            }
            start++;
            end--;
        }
    }

    public static int findNoRepeat(int[] data) {
        int len = data.length;
        if (len == 0) {
            return 0;
        }
        int ret = 0;
        for (int i = 0; i < len; i++) {
            ret ^= data[i];
        }
        return ret;
    }

    public static int findSecondNum(int[] data) {
        int len = data.length;
        if (len < 2) {
            return 0;
        }
        int n1 = data[0];
        int n2 = data[0];
        for (int i = 1; i < len; i++) {
            if (data[i] > n1) {
                if (n1 > n2) {
                    n2 = n1;
                }
                n1 = data[i];
            }
        }
        return n2;
    }

    public static void findMinMaxNum(int[] data) {
        int len = data.length;
        if (len == 0) {
            System.out.println(0);
        }
        int min = data[0];
        int max = data[0];
        for (int i = 1; i < len; i++) {
            if (data[i] > max) {
                max = data[i];
            }
            if (data[i] < min) {
                min = data[i];
            }
        }
        System.out.println("max=" + max);
        System.out.println("min=" + min);
    }

    public static int findMaxSubarray(int[] data) {
        int len = data.length;
        if (len == 0) {
            return 0;
        }
        if (len == 1) {
            return data[0];
        }
        int max = data[0];
        int sum_cur = data[0];
        for (int i = 1; i < len; i++) {
            if (sum_cur < 0) {
                sum_cur = data[i];
            } else {
                sum_cur += data[i];
            }

            if (sum_cur > max) {
                max = sum_cur;
            }
        }
        return max;
    }

    public static List<int[]> findSum(int[] data, int target) {
        int len = data.length;
        if (len == 0) {
            return null;
        }
        List<int[]> rets = new ArrayList<>();
        Hashtable<Integer, Integer> table = new Hashtable<>();
        for (int i = 0; i < len; i++) {
            int temp = target - data[i];
            if (table.containsKey(temp)) {
                int[] ret = {data[i], temp};
                rets.add(ret);
            } else {
                table.put(data[i], temp);
            }
        }
        return rets;
    }

    public static boolean binarySearch(int[] data, int key, int start, int end) {
        if (start > end) {
            return false;
        }
        int mid = (start + end) / 2;
        if (data[mid] == key) {
            return true;
        } else if (data[mid] > key) {
            return binarySearch(data, key, 0, mid - 1);
        } else {
            return binarySearch(data, key, mid + 1, end);
        }
    }

    public static int binarySearch1(int[] data, int key, int start, int end) {
        if (start > end) {
            return -1;
        }
        while (start <= end) {
            int mid = (start + end) / 2;
            if (data[mid] == key) {
                return mid;
            } else if (data[mid] > key) {
                end = mid - 1;
            } else {
                start = mid + 1;
            }
        }
        return -1;
    }

}







//        int[][] arr = {
//            {1, 2, 8, 9},
//            {2, 4, 9, 12},
//            {4, 7, 10, 13},
//            {6, 8, 11, 15}
//        };
//        System.out.println(Find(arr, 4, 4, 7));
//        int[] arr = {3, 4, 5, 1, 2};
//        int[] arr = {1, 1, 1, 0, 1};
//        System.out.println(Min(arr));
//        System.out.println(Arrays.toString(arrayObj.rightMove(arr, 2)));
//        int[] arr = {1, 2, 3, 1, 2, 3, 4};
//        System.out.println(arrayObj.findNoRepeat(arr));
//        int[] arr = {1, 2, 3, 4};
//        System.out.println(arrayObj.findSecondNum(arr));
//        arrayObj.findMinMaxNum(arr);
//        int[] arr = {1, -1, 2, 3, 0, -1, 3};
//        System.out.println(arrayObj.findMaxSubarray(arr));
//          int[] arr = {1,8,0,9,2,3,1,6};
//          List<int[]>rets = arrayObj.findSum(arr, 9);
//          System.out.println(rets.toString());
        int[] arr = {2, 4, 7, 9, 10};
        System.out.println(arrayObj.binarySearch1(arr, 10, 0, 4));